#SVM

#Creating a database for the project
#Imports:
import numpy as np
import pandas as pd
import pandas_datareader as pdr
import datetime as dt
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score,accuracy_score
from sklearn import svm
from sklearn.svm import SVR
import os
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

#####  https://randerson112358.medium.com/predict-stock-prices-using-python-machine-learning-53aa024da20a


#Create standard DataFrame
base = dt.datetime.today()
date_list = [base - dt.timedelta(days=x) for x in range(5000)]
date_list = [date_list[x].strftime("%Y-%m-%d") for x in range(len(date_list))]
date_list = [i for i in reversed(date_list)]
df = pd.DataFrame(index=date_list)


#Load the data for Bitcoin Price
Ticker = 'btcusd'

start = dt.datetime(2012,1,1)
start = start.strftime("%Y-%m-%d")

end = dt.datetime(2020,1,1)
end = end.strftime("%Y-%m-%d")





df = df.drop(df[df.index<start].index)
df = df.drop(df[df.index>end].index)
df = df.drop(df.index[[0,-1,-2]])


Price = pdr.get_data_tiingo(Ticker,start,end, api_key = ('eef2cf8be7666328395f2702b5712e533ea072b9'))
Price = Price['close'].values

df['Price'] = Price

df = pd.DataFrame(Price, columns=['price'])




# A variable for predicting 'n' days out into the future
forecast_out = 30 #'n=30' days
#Create another column (the target ) shifted 'n' units up
df['Prediction'] = df[['price']].shift(-forecast_out)
#print the new data set
print(df.tail())

### Create the independent data set (X)  #######
# Convert the dataframe to a numpy array
X = np.array(df.drop(['Prediction'],1))

#Remove the last '30' rows
X = X[:-forecast_out]
print(X)

### Create the dependent data set (y)  #####
# Convert the dataframe to a numpy array 
y = np.array(df['Prediction'])
# Get all of the y values except the last '30' rows
y = y[:-forecast_out]
print(y)

# Split the data into 80% training and 20% testing
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Create and train the Support Vector Machine (Regressor) 
svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.01) 
svr_rbf.fit(x_train, y_train)

# Testing Model: Score returns the coefficient of determination R^2 of the prediction. 
# The best possible score is 1.0
svm_confidence = svr_rbf.score(x_test, y_test)
print("svm confidence: ", svm_confidence)

# Create and train the Linear Regression  Model
lr = LinearRegression()
# Train the model
lr.fit(x_train, y_train)


# Testing Model: Score returns the coefficient of determination R^2 of the prediction. 
# The best possible score is 1.0
lr_confidence = lr.score(x_test, y_test)
print("lr confidence: ", lr_confidence)

# Set x_forecast equal to the last 30 rows of the original data set from Adj. Close column
x_forecast = np.array(df.drop(['Prediction'],1))[-forecast_out:]
print(x_forecast)


# Print linear regression model predictions for the next '30' days
lr_prediction = lr.predict(x_forecast)
print(lr_prediction)
# Print support vector regressor model predictions for the next '30' days
svm_prediction = svr_rbf.predict(x_forecast)
print(svm_prediction)

#plot
s = np.array(Price[-forecast_out:])

plt.plot(s,c='black', label = 'Real Price')
plt.plot(lr_prediction, c='red',label='Linear Regression')
plt.ylim(3000,9000)
plt.xlim(0.30)
plt.plot(svm_prediction, c='blue',label='SVM')
plt.xlabel('Prediction Days')
plt.ylabel('Bitcoin Price')
plt.legend()
plt.show()
plt.savefig('svm graph.png')
